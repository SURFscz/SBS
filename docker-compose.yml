version: "2"

services:

  db:
    image: mysql:8.0
    volumes:
      - ./etc/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./etc/mysql.cnf:/etc/mysql/conf.d/mysql.cnf
      - ./data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${SECRET}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASS}
    networks:
      - backend
    restart: unless-stopped

  db_front:
    image: adminer
    links:
      - db
    ports:
      - 8080:8080
    networks:
      - backend
      - frontend
    restart: unless-stopped

  server:
    build: server
    volumes:
      - ./log:/opt/app/log
      - ./etc/config.env:/tmp/config.env
      - ./etc/alembic.env:/tmp/alembic.env
    depends_on:
      - db
    networks:
      - backend
    environment:
      SECRET: ${SECRET}
      
      DB_HOST: db
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}

      MAIL_HOST: ${MAIL_HOST}
      MAIL_PORT: ${MAIL_PORT}

      API_USER: ${API_USER}
      API_PASS: ${API_PASS}

      BASE_URL: ${BASE_URL}

      ADMIN_USERS: ${ADMIN_USERS}

      PROFILE: local
    command:
      - /bin/bash
      - -c
      - |
        envsubst < /tmp/config.env > server/config/config.yml
        envsubst < /tmp/config.env > server/config/test_config.yml
        envsubst < /tmp/alembic.env > server/migrations/alembic.ini
        echo "Waiting for Database..."
        sleep 20
        python -m server
    restart: unless-stopped

  client-test:
    build:
      context: client
      dockerfile: Dockerfile.test
    ports:
      - 3000:3000
    networks:
      - frontend
      - backend
    links:
      - server
    restart: unless-stopped

  client-prod:
    build:
      context: client
      dockerfile: Dockerfile.prod
    volumes:
      - ./etc/httpd.conf:/usr/local/apache2/conf/httpd.conf
      - ./etc/proxy-html.conf:/usr/local/apache2/conf/extra/proxy-html.conf
    ports:
      - ${BASE_PORT}:80
    networks:
      - frontend
      - backend
    links:
      - server
    restart: unless-stopped

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
