---
# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events
  push:
  pull_request:
  release:
    tags:
      - 'v*'
    types: [published]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "Server flake8"
  Server_tests:
    name: Server tests
    if: always()

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Test different python versions
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.7', '3.9', '3.10']

    services:
      # How to use MySQL
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps port 6379 on service container to the host
          - 6379:6379
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      - name: Setup mysql server
        run: >
          mysql -uroot -proot -h127.0.0.1 -e "
            DROP DATABASE IF EXISTS sbs_test;
            CREATE DATABASE IF NOT EXISTS sbs_test DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_unicode_ci;
            CREATE USER 'sbs'@'%' IDENTIFIED BY 'sbs';
            GRANT ALL PRIVILEGES ON *.* TO 'sbs'@'%' WITH GRANT OPTION;
          "

      # Run Checkout code
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r ./server/requirements/test.txt
          pip install codecov flake8

      # Setup tmate session
      #- name: Setup tmate session
        #uses: mxschmitt/action-tmate@v3

      - name: Run flake8
        run: |
          flake8 ./server/

      - name: Run tests
        run: |
          pytest --cov=server server/test

      - name: The job has succeeded
        run: codecov --token=${{ secrets.CODECOV_TOKEN }}
        if: ${{ success() }}

  Client_build:
    name: Client build
    if: always()

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
      - name: Run errands
        run: |
          sudo apt -y install curl

      - name: Checkout
        uses: actions/checkout@v2

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Use Node.js 12
        uses: actions/setup-node@v1
        with:
          node-version: 12

      - name: Install dependencies
        shell: bash
        run: |
          source ~/.nvm/nvm.sh
          rm -rf ~/.yarn
          curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version 1.19.1
          export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"
          yarn -v
          nvm install v10.13.0
          nvm use v10.13.0
        env:
          VNM_DIR: ~/.nvm

      - name: Run tests
        shell: bash
        run: |
          cd client
          yarn install
          yarn test
          yarn build
        env:
          CI: true
          VNM_DIR: ~/.nvm

      - name: Get tag
        shell: bash
        run: |
          BASENAME=sbs-build
          echo ::set-output name=file::${BASENAME}-${GITHUB_REF_NAME}.tar.xz
        id: tag

      #- name: Setup tmate session
      #  uses: mxschmitt/action-tmate@v3

      - name: Create build file
        run: |
          tar -cJf ${{ steps.tag.outputs.file }} $(git ls-files) client/build

      - name: Create Artifact
        uses: actions/upload-artifact@v2
        with:
          name: "sbs-build"
          path: "client/${{ steps.tag.outputs.file }}"

      - name: Create Release
        if: "github.ref_type=='tag'"
        uses: softprops/action-gh-release@v1
        with:
          files: |
            client/${{ steps.tag.outputs.file }}
